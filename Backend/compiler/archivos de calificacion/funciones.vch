// Funciones no recursivas
fn saludar()  {
	print("¡Hola, mundo!")
}

fn obtener_numero() int {
	return 42
}


fn sumar(a int, b int) int {
	return a + b
}

// Funciones recursivas
fn factorial (n int) int {
	if n <= 1 {
		return 1
	}
	return n * factorial(n - 1)
}

fn fibonacci(n int) int {
	if n <= 1 {
		return n
	}
	return fibonacci(n - 1) + fibonacci(n - 2)
}

fn hanoi(n int, origen string, auxiliar string, destino string) {
	if n == 1 {
		print("Mover disco 1 de ", origen, " a ", destino)
		return
	}
	hanoi(n - 1, origen, destino, auxiliar)
	print("Mover disco ", n, "de", origen, "a", destino)
	hanoi(n - 1, auxiliar, origen, destino)
}


fn main() {
	mut puntos int = 0
        mut numero int

	print("=== Archivo de prueba de funciones ===")

	// 1. Funciones sin parámetros
	mut puntos_simples int = 0
	print("\n==== Funciones no recursivas sin parámetros ====")
	saludar()
	numero = obtener_numero()
	print("El número obtenido es: ", numero)
	if numero == 42 {
		puntos_simples += 1
		print("OK Funciones sin parámetros: correcto")
	} else {
		print("X Funciones sin parámetros: incorrecto")
	}

	// 2. Funciones con parámetros
	mut puntos_param int = 0
	print("\n==== Funciones no recursivas con parámetros ====")
	// saludar_persona("Juan") //ERROR FUNCION NO CREADA
       mut resultado int
	resultado = sumar(10, 20)
	print("La suma de 10 y 20 es: ", resultado)
	if resultado == 30 {
		puntos_param += 2
		print("OK Función con parámetros: correcto")
	} else {
		print("X Función con parámetros: incorrecto")
	}

	// 3. Funciones recursivas
	mut puntos_recur int  = 0
	print("\n==== Funciones recursivas ====")
        mut fact int = factorial(5)
        //print(factorial(5))
	//fact = factorial(5)
	print("Factorial de 5:")
	print(fact)
	if fact == 120 {
		puntos_recur += 2
		print("OK factorial: correcto")
	} else {
		print("X factorial: incorrecto")
	}

	mut fibo int = fibonacci(10)
	print("Fibonacci de 10:")
	print(fibo)
	if fibo == 55 {
		puntos_recur += 2
		print("OK fibonacci: correcto")
	} else {
		print("X fibonacci: incorrecto")
	}

	print("\nTorres de Hanoi:")
	hanoi(3, "A", "B", "C")
	puntos_recur += 2

	// 4. strconv.Atoi (simulado)
	mut puntos_atoi int = 0
	print("\n==== strconv.Atoi ====")
	mut val int
        val = Atoi("123")
	print("123 convertido a int: ", val)
	if val == 123 {
		puntos_atoi += 1
		print("OK strconv.Atoi: correcto")
	} else {
		print("X strconv.Atoi: incorrecto")
	}

	// 5. ParseFloat 
	/*
	
	NOTA: Si es necesario cambiar los nombres de las nativas 
	porque asi se trabajo, adelante. 
	
	*/
	mut puntos_parse int = 0
	print("\n==== strconv.ParseFloat ====")
	mut val1 float64
        val1 = parseFloat("123.45")
	mut val2 float64
        val2 = parseFloat("123")
	print("123.45 convertido a float64:", val1)
	print("123 convertido a float64:", val2)
	if val1 == 123.45 && val2 == 123.0 {
		puntos_parse += 1
		print("OK strconv.ParseFloat: correcto")
	} else {
		print("X strconv.ParseFloat: incorrecto")
	}

	// 6. TypeOf 
	mut puntos_type int = 0
	print("\n==== reflect.TypeOf ====")
	// => Correccion del TypeOf 
	mut t1 string = typeOf(42)
        print("Tipo de 42:", t1)
	mut t2 string = typeOf(3.14)
	mut t3 string = typeOf("Hola")
	mut t4 string= typeOf(true)
	mut t5 string = typeOf([1, 2, 3])
	print("Tipo de 42:", t1)
	print("Tipo de 3.14:", t2)
	print("Tipo de 'Hola':", t3)
	print("Tipo de true:", t4)
	print("Tipo de [1, 2, 3]:", t5)

	if t1 == "int" && t2 == "float64" && t3 == "string" && t4 == "bool" && t5 == "[]int" {
		puntos_type += 1
		print("OK reflect.TypeOf: correcto")
	} else {
		print("X reflect.TypeOf: incorrecto")
	}

	// TOTAL
	puntos = puntos_simples + puntos_param + puntos_recur + puntos_atoi + puntos_parse + puntos_type

	print("\n=== Tabla de Resultados ===")
	print("| Funciones sin parámetros         |  / 1")
	print(puntos_simples)
	print("| Funciones con parámetros         |  / 2")
	print(puntos_param)
	print("| Funciones recursivas             |  / 6")
	print(puntos_recur)
	print("| Atoi                             |  / 1")
	print(puntos_atoi)
	print("| ParseFloat                       |  / 1")
	print(puntos_parse)
	print("| TypeOf                           |  / 1")
	print(puntos_type)
	print("| TOTAL                            |  / 12")
	print(puntos)
}
